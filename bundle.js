!function(t){var e={};function r(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,i){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(i,o,function(e){return t[e]}.bind(null,o));return i},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=7)}([function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){return function(){}}();e.MatrixSet=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(0);e.Ishape=new i.MatrixSet,e.Ishape.matrix1=[[0,1,0,0],[0,1,0,0],[0,1,0,0],[0,1,0,0]],e.Ishape.matrix2=[[0,0,0,0],[1,1,1,1],[0,0,0,0],[0,0,0,0]],e.Ishape.matrix3=[[0,1,0,0],[0,1,0,0],[0,1,0,0],[0,1,0,0]],e.Ishape.matrix4=[[0,0,0,0],[1,1,1,1],[0,0,0,0],[0,0,0,0]],e.OShape=new i.MatrixSet,e.OShape.matrix1=[[1,1],[1,1]],e.OShape.matrix2=[[1,1],[1,1]],e.OShape.matrix3=[[1,1],[1,1]],e.OShape.matrix4=[[1,1],[1,1]],e.Jshape=new i.MatrixSet,e.Jshape.matrix1=[[0,1,0],[0,1,0],[1,1,0]],e.Jshape.matrix2=[[1,0,0],[1,1,1],[0,0,0]],e.Jshape.matrix3=[[0,1,1],[0,1,0],[0,1,0]],e.Jshape.matrix4=[[0,0,0],[1,1,1],[0,0,1]],e.Lshape=new i.MatrixSet,e.Lshape.matrix1=[[0,1,0],[0,1,0],[0,1,1]],e.Lshape.matrix2=[[0,0,0],[1,1,1],[1,0,0]],e.Lshape.matrix3=[[1,1,0],[0,1,0],[0,1,0]],e.Lshape.matrix4=[[0,0,1],[1,1,1],[0,0,0]],e.Sshape=new i.MatrixSet,e.Sshape.matrix1=[[0,1,0],[0,1,1],[0,0,1]],e.Sshape.matrix2=[[0,0,0],[0,1,1],[1,1,0]],e.Sshape.matrix3=[[0,1,0],[0,1,1],[0,0,1]],e.Sshape.matrix4=[[0,0,0],[0,1,1],[1,1,0]],e.Tshape=new i.MatrixSet,e.Tshape.matrix1=[[0,1,0],[1,1,1],[0,0,0]],e.Tshape.matrix2=[[0,1,0],[0,1,1],[0,1,0]],e.Tshape.matrix3=[[0,0,0],[1,1,1],[0,1,0]],e.Tshape.matrix4=[[0,1,0],[1,1,0],[0,1,0]],e.Zshape=new i.MatrixSet,e.Zshape.matrix1=[[0,0,1],[0,1,1],[0,1,0]],e.Zshape.matrix2=[[0,0,0],[1,1,0],[0,1,1]],e.Zshape.matrix3=[[0,0,1],[0,1,1],[0,1,0]],e.Zshape.matrix4=[[0,0,0],[1,1,0],[0,1,1]]},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){return function(t,e){this.row=t,this.col=e}}();e.Coordinate=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(2),o=function(){function t(t){this.originalColor="rgb(66, 66, 66)",this.matrixes=t,this.coordinates=[],this.setcolor(),this.done=!1,this.col=Math.floor(6*Math.random()+2),this.state=1}return t.prototype.leftPress=function(t,e){this.checkBelowWrapper(t,this.row,this.col-1)&&this.col--},t.prototype.rightPress=function(t,e){this.checkBelowWrapper(t,this.row,this.col+1)&&this.col++},t.prototype.upPress=function(t,e){var r=this,i=this.deleteCoordinates(t),o=this.state;this.incrementState(),this.checkBelowWrapper(t,this.row,this.col)||(this.state=o,i.forEach(function(e){r.drawToPoint(t,e)}))},t.prototype.downPress=function(t){this.checkBelowWrapper(t,this.row+1,this.col)&&this.row++},t.prototype.draw=function(t,e){return this.checkBelowWrapper(t,this.row,this.col)?(this.deleteCoordinates(t),this.drawMatrixWrapper(t),!0):(this.done=!0,0!==this.row)},t.prototype.checkBelowWrapper=function(t,e,r){switch(this.state){case 1:return this.checkBelow(t,this.matrixes.matrix1,e,r);case 2:return this.checkBelow(t,this.matrixes.matrix2,e,r);case 3:return this.checkBelow(t,this.matrixes.matrix3,e,r);case 4:return this.checkBelow(t,this.matrixes.matrix4,e,r)}},t.prototype.drawMatrix=function(t,e){for(var r=0;r<e.length;++r)for(var o=0;o<e[r].length;++o)1===e[r][o]&&this.drawToPoint(t,new i.Coordinate(this.row+r,this.col+o))},t.prototype.drawMatrixWrapper=function(t){switch(this.state){case 1:this.drawMatrix(t,this.matrixes.matrix1);break;case 2:this.drawMatrix(t,this.matrixes.matrix2);break;case 3:this.drawMatrix(t,this.matrixes.matrix3);break;case 4:this.drawMatrix(t,this.matrixes.matrix4)}},t.prototype.checkBelow=function(t,e,r,i){var o=this,s=this.deleteCoordinates(t);return!!this.checkIfFits(r,i,t,e)||(s.forEach(function(e){o.drawToPoint(t,e)}),!1)},t.prototype.checkIfFits=function(t,e,r,i){for(var o=0;o<i.length;++o)for(var s=0;s<i[o].length;++s)if(1===i[o][s]){if(!r[t+o]||!r[t+o][e+s])return!1;if(!r[t+o][e+s].empty)return!1}return!0},t.prototype.decr=function(){this.row=this.row+1},t.prototype.setcolor=function(){switch(Math.floor(6*Math.random()+1)){case 0:this.color="rgb(11, 98, 237)";break;case 1:this.color="rgb(19, 237, 11)";break;case 2:this.color="rgb(249, 72, 90)";break;case 3:this.color="rgb(245, 255, 66)";break;case 4:this.color="rgb(66, 255, 248)";break;case 5:this.color="rgb(255, 66, 176)";break;case 6:this.color="rgb(255, 154, 66)"}},t.prototype.drawToPoint=function(t,e){t[e.row]&&t[e.row][e.col]?(t[e.row][e.col].color=this.color,t[e.row][e.col].empty=!1,this.coordinates.push(new i.Coordinate(e.row,e.col))):console.log("Trying to draw something that doesn't exists at boardmap["+e.row+"]["+e.col+"]")},t.prototype.deleteToPoint=function(t,e,r){t[e]&&t[e][r]?(t[e][r].color=this.originalColor,t[e][r].empty=!0):console.log("Trying to delete something that doesn't exists at boardmap["+e+"]["+r+"]")},t.prototype.deleteCoordinates=function(t){for(var e=[];this.coordinates.length>0;){var r=this.coordinates.pop();e.push(r),this.deleteToPoint(t,r.row,r.col)}return e},t.prototype.incrementState=function(){this.state<4?++this.state:this.state=1},t}();e.Player=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(3),o=r(1),s=function(){function t(t){this.originalColor="rgb(66, 66, 66)",this.initP(t)}return t.prototype.printBoard=function(t){for(var e=0;e<20;++e){for(var r="",i=0;i<10;++i)t[e][i].empty?r+="x":r+="o";console.log(r)}},t.prototype.initP=function(t){this.started=!1,this.speiceList=[],this.generateType(),this.player.row=-1,this.firstTime=!0,this.checkBoardForRows(t)},t.prototype.leftPress=function(t,e){this.player.leftPress(t,e),this.draw(t,e)},t.prototype.rightPress=function(t,e){this.player.rightPress(t,e),this.draw(t,e)},t.prototype.upPress=function(t,e){this.player.upPress(t,e),this.draw(t,e)},t.prototype.downPress=function(t,e){this.player.downPress(t),this.draw(t,e)},t.prototype.generateType=function(){switch(Math.floor(6*Math.random()+1)){case 1:this.kind="I";break;case 2:this.kind="0";break;case 3:this.kind="T";break;case 4:this.kind="J";break;case 5:this.kind="L";break;case 6:this.kind="Z";case 7:this.kind="S"}"Z"===this.kind?this.player=new i.Player(o.Zshape):"I"===this.kind?this.player=new i.Player(o.Ishape):"0"===this.kind?this.player=new i.Player(o.OShape):"T"===this.kind?this.player=new i.Player(o.Tshape):"J"===this.kind?this.player=new i.Player(o.Jshape):"L"===this.kind?this.player=new i.Player(o.Lshape):"S"===this.kind&&(this.player=new i.Player(o.Sshape))},t.prototype.draw=function(t,e){this.player.done&&(this.player=new i.Player(o.Zshape));var r=this.player.draw(t,e);return this.player.done&&(this.player=new i.Player(o.Zshape),this.initP(t)),r},t.prototype.decr=function(){this.player.decr()},t.prototype.checkBoardForRows=function(t){for(var e=19;e>-1;e--){for(var r=!0,i=9;i>-1;i--)t[e][i].empty&&(r=!1);if(r){for(var o=e;o>1;--o)for(var s=0;s<10;++s)t[o][s].empty=t[o-1][s].empty,t[o][s].color=t[o-1][s].color;for(i=0;i<10;i++)t[0][i].empty=!0,t[0][i].color=this.originalColor;this.checkBoardForRows(t)}}},t}();e.TPiece=s},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e,r){this.color=t,this.left=e,this.top=r}return t.prototype.draw=function(t,e){t.fillStyle=this.color,t.fillRect(this.left+2+e,this.top+2+60,38,38)},t}();e.Piece=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(5),o=r(4),s=function(){function t(){this.canvas=document.querySelector(".myCanvas"),this.backgroundColor="rgb(38, 37, 37)",this.boardmap=[],this.zeroBoard(),this.initBoard(),this.gameInProgress=!0,this.t=new o.TPiece(this.boardmap);var t=this.getCenter();this.left=t-200}return t.prototype.touchFall=function(t){t>=this.getCenter()?this.t.leftPress(this.boardmap,this.left):this.t.rightPress(this.boardmap,this.left)},t.prototype.getTouchPos=function(t,e){var r=t.getBoundingClientRect();return{x:e.touches[0].clientX-r.left,y:e.touches[0].clientY-r.top}},t.prototype.getPiece=function(){return this.t},t.prototype.getCenter=function(){return Math.floor(this.width/2)},t.prototype.keyPress=function(t){"38"==t.keyCode?this.t.upPress(this.boardmap,this.left):"40"==t.keyCode?this.t.downPress(this.boardmap,this.left):"37"==t.keyCode?this.t.leftPress(this.boardmap,this.left):"39"==t.keyCode&&this.t.rightPress(this.boardmap,this.left)},t.prototype.decrTime=function(){this.gameInProgress&&(this.t.decr(),this.t.draw(this.boardmap,this.left)||(this.gameInProgress=!1))},t.prototype.zeroBoard=function(){this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.width=window.innerWidth,this.height=window.innerHeight,this.ctx=this.canvas.getContext("2d")},t.prototype.initBoard=function(){var t=this.getCenter()-200;this.left=t;for(var e=0;e<20;e++){for(var r=[],o=0;o<10;++o){var s=new i.Piece("rgb(66, 66, 66)",40*o,40*e);s.empty=!0,r.push(s)}this.boardmap.push(r),r=[]}},t.prototype.drawBoard=function(){this.zeroBoard(),this.ctx.fillStyle=this.backgroundColor,this.ctx.fillRect(0,0,this.width,this.height);var t=this.getCenter()-200;this.left=t,this.ctx.strokeStyle="rgb(255, 255, 255)",this.ctx.lineWidth=1,this.ctx.strokeRect(t,60,400,800),this.drawLines(t);for(var e=0,r=this.boardmap;e<r.length;e++)for(var i=0,o=r[e];i<o.length;i++){o[i].draw(this.ctx,t)}},t.prototype.drawLines=function(t){this.ctx.strokeStyle="rgb(91, 89, 89)";for(var e=40;e<400;e+=40)this.ctx.moveTo(t+e,60),this.ctx.lineTo(t+e,860),this.ctx.stroke();for(e=60;e<860;e+=40)this.ctx.moveTo(t,e),this.ctx.lineTo(t+400,e),this.ctx.stroke()},t}();e.Board=s},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=new(r(6).Board);window.setInterval(function(){i.drawBoard()},20),window.setInterval(function(){i.decrTime(),50},300);window.addEventListener("keydown",function(t){i.keyPress(t)},!1),window.addEventListener("touchstart",function(t){var e=t.originalEvent.touches[0].pageX;i.touchFall(e)},!1),window.onresize=function(t){i.drawBoard()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,